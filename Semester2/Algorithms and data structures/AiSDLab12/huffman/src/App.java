import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.PriorityQueue;

public class App {

    public static char[] charArray;
    public static int[] charfreq;


    public static void main(String[] args) throws Exception {
        String filePath = "/home/kamil/Documents/AiSDLab12/huffman/src/file.txt";


        dataArrayGenerator(readFile(filePath));
        int n = charArray.length;

        PriorityQueue<HuffmanNode> q
        = new PriorityQueue<HuffmanNode>(
            n, new MyComparator());

            for (int i = 0; i < n; i++) {
 
                // creating a Huffman node object
                // and add it to the priority queue.
                HuffmanNode hn = new HuffmanNode();
     
                hn.c = charArray[i];
                hn.data = charfreq[i];
     
                hn.left = null;
                hn.right = null;
     
                // add functions adds
                // the huffman node to the queue.
                q.add(hn);
            }

            HuffmanNode root = null;
 
            // Here we will extract the two minimum value
            // from the heap each time until
            // its size reduces to 1, extract until
            // all the nodes are extracted.
            while (q.size() > 1) {
     
                // first min extract.
                HuffmanNode x = q.peek();
                q.poll();
     
                // second min extract.
                HuffmanNode y = q.peek();
                q.poll();
     
                // new node f which is equal
                HuffmanNode f = new HuffmanNode();
     
                // to the sum of the frequency of the two nodes
                // assigning values to the f node.
                f.data = x.data + y.data;
                f.c = '-';
     
                // first extracted node as left child.
                f.left = x;
     
                // second extracted node as the right child.
                f.right = y;
     
                // marking the f node as the root node.
                root = f;
     
                // add this node to the priority-queue.
                q.add(f);
            }

            printCode(root, "");
        
    }

    public static void dataArrayGenerator(String str){
        String[] stringArray = str.split("");
        ArrayList<Character> charArrayList = new ArrayList<>();
        ArrayList<Integer> charArrayListNumbers = new ArrayList<>();

        for(int i = 0; i< stringArray.length;i++){
            charArrayList.add(stringArray[i].charAt(0));
        }

        for(int i = 0; i<charArrayList.size();i++){
            char temp = charArrayList.get(i);
            int counter = 1;
            for(int j = i+1; j<charArrayList.size();j++){
                if(temp == charArrayList.get(j)){
                    counter++;
                    charArrayList.remove(j);
                    j--;
                }
            }
            charArrayListNumbers.add(counter);
        }


        charArray = new char[charArrayList.size()];
        charfreq = new int[charArrayListNumbers.size()];

        for(int i = 0; i<charArrayList.size();i++){
            charArray[i] = charArrayList.get(i);
            charfreq[i] = charArrayListNumbers.get(i);
        }

    }

    public static String readFile(String filePath) {
        StringBuilder sb = new StringBuilder();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        String text = sb.toString();

        return text;
    }


    public static void printCode(HuffmanNode root, String s)
    {
 
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left == null && root.right == null
            && Character.isLetter(root.c)) {
 
            // c is the character in the node
            System.out.println(root.c + ":" + s);
 
            return;
        }
 
        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.
 
        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }


}


